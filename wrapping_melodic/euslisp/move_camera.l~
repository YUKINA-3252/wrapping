(load "package://hrpsys_ros_bridge_tutorials/euslisp/hironxjsk-interface.l")
(load "models/arrow-object.l")
(ros::load-ros-package "jsk_recognition_msgs")

(hironxjsk-init)
(setq *right-coords-arrow* (arrow))
(setq *left-coords-arrow* (arrow))
(send *right-coords-arrow* :newcoords (send *hironxjsk* :rarm :end-coords :copy-worldcoords))
(send *left-coords-arrow* :newcoords (send *hironxjsk* :larm :end-coords :copy-worldcoords))
(send (send *hironxjsk* :larm :end-coords) :assoc *left-coords-arrow*)
(send (send *hironxjsk* :rarm :end-coords) :assoc *right-coords-arrow*)
(setq object-list (list *hironxjsk* *right-coords-arrow* *left-coords-arrow*))
(objects object-list)


(defun ir2ri (&optional (time 3000))
  (send *ri* :angle-vector (send *hironxjsk* :angle-vector) time)
  (send *ri* :hand-angle-vector :rhand (send *hironxjsk* :hand-angle-vector :rhand))
  (send *ri* :hand-angle-vector :lhand (send *hironxjsk* :hand-angle-vector :lhand))
  (send *ri* :wait-interpolation))
(defun reset-pose ()
  (send *hironxjsk* :reset-manip-pose)
  (send *hironxjsk* :larm :move-end-pos #f(0 0 200) :world)
  (send *hironxjsk* :rarm :move-end-pos #f(0 0 200) :world)
  (send *hironxjsk* :stop-grasp)
  (send *hironxjsk* :head :look-at
        (send (send (send *hironxjsk* :torso :end-coords :copy-worldcoords)
                    :translate #f(600 0 0)) :worldpos))
  (send *irtviewer* :draw-objects)
  (send *ri* :angle-vector (send *hironxjsk* :angle-vector) 5000)
  (send *ri* :wait-interpolation)
  (send *ri* :stop-grasp)
  (send *ri* :wait-interpolation)
  (setq left-initial-coords (send *hironxjsk* :larm :end-coords :copy-worldcoords))
  (setq right-initial-coords (send *hironxjsk* :rarm :end-coords :copy-worldcoords))
  (setq initial-coords (send *hironxjsk* :angle-vector)))
(defun ri2ir ()
  (send *hironxjsk* :angle-vector (send *ri* :state :potentio-vector)))

;; Front angle
(send left-hand-pos :rotate (deg2rad 30) :y)
(send *hironxjsk* :larm :inverse-kinematics (send left-hand-pos :copy-worldcoords) :rotation-axis t)
;; (send left-hand-pos :translate #f(-50 0 50) :world)
(send *hironxjsk* :larm :inverse-kinematics (send left-hand-pos :copy-worldcoords) :rotation-axis t)
(ros::service-call "/sample_pointcloud_to_pcd/save_pcd" req)
;; 45 digrees diagonally
(send left-hand-pos :translate #f(20 20 0) :world)
(send left-hand-pos :rotate -pi/4 :z)
(send *hironxjsk* :larm :inverse-kinematics (send left-hand-pos :copy-worldcoords) :rotation-axis t)
(send left-hand-pos :translate #f(20 0 0) :world)
(send left-hand-pos :rotate -pi/4 :z)
(send *hironxjsk* :larm :inverse-kinematics (send left-hand-pos :copy-worldcoords) :rotation-axis t)
