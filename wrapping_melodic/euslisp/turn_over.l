(load "models/arrow-object.l")
(load "package://hrpsys_ros_bridge_tutorials/euslisp/hironxjsk-interface.l")
(load "package://wrapping_melodic/euslisp/detect.l")
(load "package://wrapping_melodic/euslisp/force-utils.l")
(ros::load-ros-package "jsk_recognition_msgs")

(hironxjsk-init)
(setq *right-coords-arrow* (arrow))
(setq *left-coords-arrow* (arrow))
(setq *right-target-arrow* (arrow))
(setq *left-target-arrow* (arrow))
(send *right-coords-arrow* :newcoords (send *hironxjsk* :rarm :end-coords :copy-worldcoords))
(send *left-coords-arrow* :newcoords (send *hironxjsk* :larm :end-coords :copy-worldcoords))
(send *right-target-arrow* :newcoords (send *hironxjsk* :rarm :end-coords :copy-worldcoords))
(send *left-coords-arrow* :newcoords (send *hironxjsk* :larm :end-coords :copy-worldcoords))
(send (send *hironxjsk* :larm :end-coords) :assoc *left-coords-arrow*)
(send (send *hironxjsk* :rarm :end-coords) :assoc *right-coords-arrow*)
(setq object-list (list *hironxjsk* *right-coords-arrow* *left-coords-arrow*))
(objects object-list)


(ros::subscribe "/off_lhsensor" geometry_msgs::WrenchStamped #'ftsensor-cb :larm)
(ros::subscribe "/off_rhsensor" geometry_msgs::WrenchStamped #'ftsensor-cb :rarm)


(defun ir2ri (&optional (time 3000))
  (send *ri* :angle-vector (send *hironxjsk* :angle-vector) time)
  (send *ri* :hand-angle-vector :rhand (send *hironxjsk* :hand-angle-vector :rhand))
  (send *ri* :hand-angle-vector :lhand (send *hironxjsk* :hand-angle-vector :lhand))
  (send *ri* :wait-interpolation))
(defun ir2ri-hand ()
    (send *ri* :hand-angle-vector :rhand (send *hironxjsk* :hand-angle-vector :rhand))
    (send *ri* :hand-angle-vector :lhand (send *hironxjsk* :hand-angle-vector :lhand))
    (send *ri* :wait-interpolation))

;; hand-angle-vector when stop-grasp is #f(54.2384 -54.2384 -54.2384 54.2384)
(defun open-lhand()
  (let ((hand-angle-vector (send *hironxjsk* :hand-angle-vector :lhand)))
    (setf (aref hand-angle-vector 0) 80)
    (setf (aref hand-angle-vector 1) 0)
    (setf (aref hand-angle-vector 2) -100)
    (setf (aref hand-angle-vector 3) 0)
    (send *hironxjsk* :hand-angle-vector :lhand hand-angle-vector)
    (ir2ri-hand)))
(defun open-lhand-tape-1()
  (let ((hand-angle-vector (send *hironxjsk* :hand-angle-vector :lhand)))
    (setf (aref hand-angle-vector 0) -10)
    (setf (aref hand-angle-vector 1) 0)
    (setf (aref hand-angle-vector 2) 40)
    (setf (aref hand-angle-vector 3) -50)
    (send *hironxjsk* :hand-angle-vector :lhand hand-angle-vector)
    (ir2ri-hand)))
(defun open-lhand-tape()
  (let ((hand-angle-vector (send *hironxjsk* :hand-angle-vector :lhand)))
    (setf (aref hand-angle-vector 0) -10)
    (setf (aref hand-angle-vector 1) 0)
    (setf (aref hand-angle-vector 2) 0)
    (setf (aref hand-angle-vector 3) 0)
    (send *hironxjsk* :hand-angle-vector :lhand hand-angle-vector)
    (ir2ri-hand)))
(defun open-lhand-tape-2nd()
  (let ((hand-angle-vector (send *hironxjsk* :hand-angle-vector :lhand)))
    (setf (aref hand-angle-vector 0) -10)
    (setf (aref hand-angle-vector 1) 0)
    (setf (aref hand-angle-vector 2) 0)
    (setf (aref hand-angle-vector 3) -30)
    (send *hironxjsk* :hand-angle-vector :lhand hand-angle-vector)
    (ir2ri-hand)))
(defun open-rhand()
  (let ((hand-angle-vector (send *hironxjsk* :hand-angle-vector :rhand)))
    (setf (aref hand-angle-vector 0) 10)
    (setf (aref hand-angle-vector 1) -30)
    (setf (aref hand-angle-vector 2) -54.2384)
    (setf (aref hand-angle-vector 3) 54.2384)
    (send *hironxjsk* :hand-angle-vector :rhand hand-angle-vector)
    (ir2ri-hand)))
(defun close-rhand()
  (let ((hand-angle-vector (send *hironxjsk* :hand-angle-vector :rhand)))
    (setf (aref hand-angle-vector 0) 0)
    (setf (aref hand-angle-vector 1) -40)
    (setf (aref hand-angle-vector 2) 40)
    (setf (aref hand-angle-vector 3) -10)
    (send *hironxjsk* :hand-angle-vector :rhand hand-angle-vector)
    (ir2ri-hand)))
(defun close-rhand-finish-fold()
  (let ((hand-angle-vector (send *hironxjsk* :hand-angle-vector :rhand)))
    (setf (aref hand-angle-vector 0) 0)
    (setf (aref hand-angle-vector 1) -40)
    (setf (aref hand-angle-vector 2) -45)
    (setf (aref hand-angle-vector 3) 90)
    (send *hironxjsk* :hand-angle-vector :rhand hand-angle-vector)
    (ir2ri-hand)
    ))
(defun close-rhand-finish-fold-2nd()
  (let ((hand-angle-vector (send *hironxjsk* :hand-angle-vector :rhand)))
    (setf (aref hand-angle-vector 0) 0)
    (setf (aref hand-angle-vector 1) -40)
    (setf (aref hand-angle-vector 2) 20)
    (setf (aref hand-angle-vector 3) 0)
    (send *hironxjsk* :hand-angle-vector :rhand hand-angle-vector)
    (ir2ri-hand)
    ))
(defun close-rhand-tape()
  (let ((hand-angle-vector (send *hironxjsk* :hand-angle-vector :rhand)))
    (setf (aref hand-angle-vector 0) 10)
    (setf (aref hand-angle-vector 1) -30)
    (send *hironxjsk* :hand-angle-vector :rhand hand-angle-vector)
    ;; (ir2ri-hand)
    ))
(defun close-lhand-tape-before() ;; (-22.449 15 22.449 -15)
  (let ((hand-angle-vector (send *hironxjsk* :hand-angle-vector :lhand)))
    (setf (aref hand-angle-vector 0) 15)
    (setf (aref hand-angle-vector 1) -80)
    (setf (aref hand-angle-vector 2) 50)
    (setf (aref hand-angle-vector 3) -50)
    (send *hironxjsk* :hand-angle-vector :lhand hand-angle-vector)
    (ir2ri-hand)
    ))
(defun close-lhand-tape-after()
  (let ((hand-angle-vector (send *hironxjsk* :hand-angle-vector :lhand)))
    (setf (aref hand-angle-vector 0) 30)
    (setf (aref hand-angle-vector 1) -80)
    (setf (aref hand-angle-vector 2) 50)
    (setf (aref hand-angle-vector 3) -50)
    (send *hironxjsk* :hand-angle-vector :lhand hand-angle-vector)
    (ir2ri-hand)
    (unix::sleep 2)
    (setf (aref hand-angle-vector 0) -10)
    (setf (aref hand-angle-vector 1) 0)
    (setf (aref hand-angle-vector 2) 50)
    (setf (aref hand-angle-vector 3) -50)
    (send *hironxjsk* :hand-angle-vector :lhand hand-angle-vector)
    (ir2ri-hand)
    ))
(defun open-rhand-finish-tape()
  (let ((hand-angle-vector (send *hironxjsk* :hand-angle-vector :rhand)))
    (setf (aref hand-angle-vector 0) -10)
    (setf (aref hand-angle-vector 1) 0)
    (setf (aref hand-angle-vector 2) 50)
    (setf (aref hand-angle-vector 3) -50)
    (send *hironxjsk* :hand-angle-vector :rhand hand-angle-vector)
    ;; (ir2ri-hand)
    ))

(defun reset-pose ()
  (send *hironxjsk* :reset-manip-pose)
  (send *hironxjsk* :larm :move-end-pos #f(0 0 200) :world)
  (send *hironxjsk* :rarm :move-end-pos #f(0 0 200) :world)
  (send *hironxjsk* :stop-grasp)
  (send *hironxjsk* :head :look-at
        (send (send (send *hironxjsk* :torso :end-coords :copy-worldcoords)
                    :translate #f(600 0 0)) :worldpos))
  (send *irtviewer* :draw-objects)
  (send *ri* :angle-vector (send *hironxjsk* :angle-vector) 5000)
  (send *ri* :wait-interpolation)
  (send *ri* :stop-grasp)
  (send *ri* :wait-interpolation)
  (setq left-initial-coords (send *hironxjsk* :larm :end-coords :copy-worldcoords))
  (setq right-initial-coords (send *hironxjsk* :rarm :end-coords :copy-worldcoords))
  (setq initial-coords (send *hironxjsk* :angle-vector)))
(defun detect-pose()
  (send *hironxjsk* :angle-vector #f(15.3838 -17.9424 -132.249 30.6319 60.6267 11.4336 -15.3838 -17.9424 -132.249 -30.6319 60.6267 -11.4336 0.0 0.0 50.449))
  (setq *target-coords-right* (send (send *hironxjsk* :rarm :end-coords :copy-worldcoords) :translate #f(0 -300 0)))
  (solve-ik-rarm *target-coords-right*)
  (setq *target-coords-left* (send (send *hironxjsk* :larm :end-coords :copy-worldcoords) :translate #f(0 300 0)))
  (solve-ik-larm *target-coords-left*)
  (ir2ri)
  (send *hironxjsk* :stop-grasp)
  (ir2ri-hand))
(defun detect-pose-larm()
  (setq *left-target-arrow* (send (make-coords) :locate #f(325.704 482.265 165.629) :world))
  (solve-ik-larm *left-target-arrow*)
  (ir2ri))
(defun detect-pose-rarm()
  (setq *right-target-arrow* (send (make-coords) :locate #f(325.704 -482.265 165.629) :world))
  (solve-ik-rarm *right-target-arrow*)
  (ir2ri))

(defun ri2ir ()
  (send *hironxjsk* :angle-vector (send *ri* :state :potentio-vector)))
(defun ri2ir-hand ()
  (send *hironxjsk* :hand-angle-vector :lhand (send *ri* :hand-angle-vector :lhand))
  (send *hironxjsk* :hand-angle-vector :rhand (send *ri* :hand-angle-vector :rhand)))

(defun solve-ik-larm (target-coords)
  (send *hironxjsk* :larm :inverse-kinematics (send target-coords :copy-worldcoords) :rotation-axis t)
  (send *left-coords-arrow* :move-to (send target-coords :copy-worldcoords) :world))
(defun solve-ik-rarm (target-coords)
  (send *hironxjsk* :rarm :inverse-kinematics (send target-coords :copy-worldcoords) :rotation-axis t)
  (send *right-coords-arrow* :move-to (send target-coords :copy-worldcoords) :world))

;; dot matrix
(defun dot-product (matrix1 matrix2)
  (assert (= (length matrix1) (length matrix2))
          "not match len of matrix")
  (let* ((result (make-array (list (length matrix1)))))
    (dotimes (i (length matrix1) result)
      (setf (aref result i)
            (loop for j below (length matrix2)
               sum (* (aref matrix1 i j) (aref matrix2 j)))))))
(defun matrix-multiply (matrix1 matrix2)
  (let ((result (make-array '(3))))
    (dotimes (i 3)
      (setf (aref result i)
            (+ (* (aref matrix1 i 0) (aref matrix2 0))
               (* (aref matrix1 i 1) (aref matrix2 1))
               (* (aref matrix1 i 2) (aref matrix2 2)))))
    result))


(reset-pose)
(detect-paper)
;; (unix::system "rosservice call /pointcloud_average_service /paper_finder/output/corner/x /paper_finder/output/corner/y /head_camera_remote/depth/image_rect_raw True")
(detect-box)
(setq object-list (list *hironxjsk* *right-coords-arrow* *left-coords-arrow* *right-target-arrow* *left-target-arrow* *target-bbox* *target-bbox-arrow* *target-paper* *target-paper-arrow*))
(objects object-list)

(setq box-z-size (- (+ (elt (send (send *target-bbox* :copy-worldcoords) :pos) 2) (/ (z-of-cube *target-bbox*) 2)) (elt (send (send *target-paper* :copy-worldcoords) :pos) 2)))

;; hold box with left hand
(open-lhand)
(setq box-left-up-coords (send (send *target-bbox* :copy-worldcoords) :locate (float-vector (elt (send *target-bbox* :pos) 0) (+ (elt (send *target-bbox* :pos) 1) (/ (x-of-cube *target-bbox*) 2)) (+ (elt (send *target-bbox* :pos) 2) (/ box-z-size 2))) :world))
(send *left-target-arrow* :move-to (send (send (send *hironxjsk* :larm :end-coords :copy-worldcoords) :rotate pi/2 :z) :locate (send (send (send box-left-up-coords :copy-worldcoords) :translate #f(0 -30 -40) :world) :pos) :world) :world)
(solve-ik-larm *left-target-arrow*)

;; push box
(force-move :larm :z "minux" 1 5)
(send *left-target-arrow* :move-to (send *hironxjsk* :larm :end-coords :copy-worldcoords) :world)

(open-rhand)
(setq offset-paper-detect 30) ;; detect-paper recog is slight off so set the offset
;; (send *right-target-arrow* :move-to (send (send (send (send *target-paper-arrow* :copy-worldcoords) :rotate (deg2rad 90) :z) :rotate (deg2rad -90) :x) :translate (float-vector (- offset-paper-detect) (- (/ z-of-paper 2)) 50) :world) :world)
;; (solve-ik-rarm *right-target-arrow*)
(send *right-target-arrow* :move-to (send (send (send (send *target-paper-arrow* :copy-worldcoords) :rotate (deg2rad 90) :z) :rotate (deg2rad -90) :x) :translate (float-vector (- offset-paper-detect) (+ (- (/ z-of-paper 2)) -20) 30) :world) :world)
(solve-ik-rarm *right-target-arrow*)

;; lower right arm until it hits the desk
(force-move :rarm :z "minux" 1 1)
(send *right-target-arrow* :move-to (send *hironxjsk* :rarm :end-coords :copy-worldcoords) :world)

;; move right arm closer to the paper
(send *right-target-arrow* :translate #f(0 60 0) :world)
(solve-ik-rarm *right-target-arrow*)

;; move right arm up
(send *right-target-arrow* :translate #f(0 0 10) :world)
(solve-ik-rarm *right-target-arrow*)

(close-rhand)

;; impedance
(setq set-force 4)
(send *ri* :set-impedance-controller-param :rarm :force-gain #f(0.3 0.3 0.3) :moment-gain #f(0 100 0))
(send *ri* :set-ref-force-moment (float-vector 0 set-force 0) #f(0 0 0) 1000 :rarm)
(setq before-potentio-vector  (send *ri* :state :potentio-vector))
(send *ri* :start-impedance :rarm)
(send *ri* :wait-interpolation)
(send *hironxjsk* :angle-vector (send *ri* :state :potentio-vector))
(send *right-target-arrow* :move-to (send *hironxjsk* :rarm :end-coords :copy-worldcoords) :world)

(send *right-target-arrow* :rotate (deg2rad -20) :y)
(solve-ik-rarm *right-target-arrow*)

;; Move right hand to the top of the box
;; (setq box-right-coords (send (send *target-bbox* :copy-worldcoords) :locate (float-vector (elt (send *target-bbox* :pos) 0) (+ (elt (send *target-bbox* :pos) 1) (- (/ (x-of-cube *target-bbox*) 2))) (elt (send (send *hironxjsk* :rarm :end-coords :copy-worldcoords) :worldpos) 2)) :world))
(setq box-right-coords (send (send *target-bbox* :copy-worldcoords) :locate (float-vector (elt (send (send *right-target-arrow* :copy-worldcoords) :pos) 0) (+ (elt (send *target-bbox* :pos) 1) (- (/ (x-of-cube *target-bbox*) 2))) (elt (send (send *hironxjsk* :rarm :end-coords :copy-worldcoords) :worldpos) 2)) :world))
(setq hand-box-right-len (- (elt (send (send box-right-coords :copy-worldcoords) :pos) 1) (elt (send (send *hironxjsk* :rarm :end-coords :copy-worldcoords) :pos) 1)))
;; (setq avs nil)
;; (dotimes (theta 90)
;;   (send *right-target-arrow* :move-to (send (send (send *hironxjsk* :rarm :end-coords :copy-worldcoords) :locate (send (send box-right-coords :copy-worldcoords) :pos) :world) :translate (float-vector 0 (- (* hand-box-right-len (cos (deg2rad theta)))) (* hand-box-right-len (sin (deg2rad theta)))) :world) :world)
;;   (solve-ik-rarm *right-target-arrow*)
;;   (push (send *hironxjsk* :angle-vector) avs)
;;   (send *irtviewer* :draw-objects))
;; (setq avs (reverse avs))
;; (send *ri* :angle-vector-sequence avs 100)
(dotimes (x 10)
  (send *right-target-arrow* :move-to (send (send (send *hironxjsk* :rarm :end-coords :copy-worldcoords) :locate (send (send box-right-coords :copy-worldcoords) :pos) :world) :translate (float-vector 0 (- (* hand-box-right-len (cos (deg2rad (* x 10))))) (* hand-box-right-len (sin (deg2rad (* x 10))))) :world) :world)
  (solve-ik-rarm *right-target-arrow*)
  (send *irtviewer* :draw-objects)
  (ir2ri 1000)
  (send *ri* :set-ref-force-moment (float-vector 0 (* set-force (cos (* x 10))) (- (* set-force (sin (* x 10))))) #f(0 0 0) 1000 :rarm)
  (unix::sleep 1)
  )

(setq box-right-up-coords (send (send box-right-coords :copy-worldcoords) :translate (float-vector 0 0 box-z-size) :world))
;; (setq avs nil)

;; (dotimes (theta 90)
;;   (send *right-target-arrow* :move-to (send (send (send *hironxjsk* :rarm :end-coords :copy-worldcoords) :locate (send (send box-right-up-coords :copy-worldcoords) :pos) :world) :translate (float-vector 0 (* (- hand-box-right-len box-z-size) (sin (deg2rad theta))) (* (- hand-box-right-len box-z-size) (cos (deg2rad theta)))) :world) :world)
;;   (solve-ik-rarm *right-target-arrow*)
;;   (push (send *hironxjsk* :angle-vector) avs)
;;   (send *irtviewer* :draw-objects))
;; (setq avs (reverse avs))
;; (send *ri* :angle-vector-sequence avs 100)
(dotimes (x 10)
  (send *right-target-arrow* :move-to (send (send (send *hironxjsk* :rarm :end-coords :copy-worldcoords) :locate (send (send box-right-up-coords :copy-worldcoords) :pos) :world) :translate (float-vector 0 (* (- hand-box-right-len box-z-size) (sin (deg2rad (* x 10)))) (* (- hand-box-right-len box-z-size) (cos (deg2rad (* x 10))))) :world) :world)
  (solve-ik-rarm *right-target-arrow*)
  (send *irtviewer* :draw-objects)
p  (ir2ri 1000)
  (send *ri* :set-ref-force-moment (float-vector 0 (- (* set-force (sin (* x 10)))) (- (* set-force (cos (* x 10))))) #f(0 0 0) 1000 :rarm)
  (send *ri* :wait-interpolation)
  (unix::sleep 1)
  (setq after-potentio-vector (send *ri* :state :potentio-vector))
  )
(send *ri* :stop-impedance :rarm)

(send *hironxjsk* :angle-vector after-potentio-vector)
(ir2ri)

(send *right-target-arrow* :rotate (deg2rad 10) :y)
(solve-ik-rarm *right-target-arrow*)

;; push right hand to box
(force-move :rarm :z "minux" 1 3)
(send *right-target-arrow* :move-to (send *hironxjsk* :rarm :end-coords :copy-worldcoords) :world)

;; rotate rarm
(send *right-target-arrow* :rotate (deg2rad 10) :x)
(solve-ik-rarm *right-target-arrow*)

(close-rhand-finish-fold)

(close-rhand-finish-fold-2nd)

(send *right-target-arrow* :rotate (deg2rad 10) :x)
(solve-ik-rarm *right-target-arrow*)

(send *left-target-arrow* :translate #f(0 0 100) :world)
(solve-ik-larm *left-target-arrow*)
(ir2ri 5000)

(detect-pose-larm)
(send *hironxjsk* :stop-grasp :larm)
(ir2ri-hand)

;; reach tape
(setq tape-msg (send (one-shot-subscribe "/tape_stand/pos" std_msgs::Float32MultiArray :timeout 2000) :data))
(unix::sleep 2)
(setq *tape-coords* (send (make-coords) :locate (float-vector (* (elt tape-msg 0) 1000) (* (elt tape-msg 1) 1000) (* (elt tape-msg 2) 1000)) :world))
(send *left-target-arrow* :move-to (send (send (send (send *tape-coords* :copy-worldcoords) :rotate pi/2 :z) :rotate -pi/2 :x) :translate #f(-100 20 -30) :world) :world)
(solve-ik-larm *left-target-arrow*)

(send *left-target-arrow* :translate #f(55 0 0) :world)
(solve-ik-larm *left-target-arrow*)

(close-lhand-tape-before)

;; angle-vector-sequence. box-edge is x:0.65 y:0.21 z:45.7
(setq tape-stand-edge (make-coords))
(send tape-stand-edge :locate (float-vector 635 (elt (send (send *hironxjsk* :larm :end-coords) :worldpos) 1) (elt (send (send *hironxjsk* :larm :end-coords :copy-worldcoords) :worldpos) 2)) :world)
(setq tape-len (- (elt (send (send tape-stand-edge :copy-worldcoords) :worldpos) 0) (elt (send (send *hironxjsk* :larm :end-coords) :worldpos) 0)))
(setq avs nil)
(dotimes (theta 45)
  (send *left-target-arrow* :move-to (send (send *hironxjsk* :larm :end-coords :copy-worldcoords) :locate (send (send (send tape-stand-edge :copy-worldcoords) :translate (float-vector (- (* tape-len (cos (deg2rad theta)))) 0 (* tape-len (sin (deg2rad theta)))) :world) :pos) :world) :world)
  (solve-ik-larm *left-target-arrow*)
  (push (send *hironxjsk* :angle-vector) avs)
  (send *irtviewer* :draw-objects))
(setq avs (reverse avs))
(send *ri* :angle-vector-sequence avs 50)

(close-lhand-tape-after)

(send *left-target-arrow* :translate #f(-100 0 100) :world)
(solve-ik-larm *left-target-arrow*)

;; (send *hironxjsk* :larm :wrist-r :joint-angle -90)

;; (send *left-target-arrow* :move-to (send (send (send (make-coords) :locate (send (send (send *target-bbox* :copy-worldcoords) :translate #f(0 50 200) :world) :pos) :world) :rotate (deg2rad 0) :x) :rotate pi :z) :world)
;; (send *left-target-arrow* :rotate (deg2rad 30) :x)
(send *ri* :call-operation-return :collisiondetectorservice_settolerance :link_pair_name "RARM_JOINT5:LARM_JOINT5" :tolerance -0.01)

(send *left-target-arrow* :move-to (send (send (make-coords) :locate (send (Send (send *target-bbox* :copy-worldcoords) :translate #f(-30 -15 100) :world) :pos) :world) :rotate (deg2rad 90) :z) :world)
(send *left-target-arrow* :rotate (deg2rad -45) :x)
;; (send *left-target-arrow* :move-to (send (send (make-coords) :locate (send (send (send *target-bbox* :copy-worldcoords) :translate #f(0 30 100) :world) :pos) :world) :rotate (deg2rad -45) :x) :world)
(solve-ik-larm *left-target-arrow*)

(force-move :larm :z "minux" 3 1)
(send *left-target-arrow* :move-to (send *hironxjsk* :larm :end-coords :copy-worldcoords) :world)

;; rotate larm
(send *left-target-arrow* :rotate (deg2rad 20) :x)
(send *left-target-arrow* :translate #f(0 0 15) :world)
(solve-ik-larm *left-target-arrow*)
(ir2ri 5000)

(open-lhand-tape-1)

(send *left-target-arrow* :rotate (deg2rad 10) :x)
(send *left-target-arrow* :translate #f(0 0 5) :world)
(solve-ik-larm *left-target-arrow*)
(ir2ri 5000)

(send *left-target-arrow* :rotate (deg2rad 10) :x)
(send *left-target-arrow* :translate #f(0 0 5) :world)
(solve-ik-larm *left-target-arrow*)
(ir2ri)

(send *left-target-arrow* :rotate (deg2rad 10) :x)
(solve-ik-larm *left-target-arrow*)
(ir2ri)

(send *left-target-arrow* :rotate (deg2rad 10) :x)
(solve-ik-larm *left-target-arrow*)
(ir2ri)

(open-lhand-tape)

(send *left-target-arrow* :rotate (deg2rad 10) :x)
(solve-ik-larm *left-target-arrow*)
(ir2ri)

(open-lhand-tape-2nd)

(send *right-target-arrow* :translate #f(0 0 20) :world)
(solve-ik-rarm *right-target-arrow*)

(send *right-target-arrow* :translate #f(0 -100 0) :world)
(solve-ik-rarm *right-target-arrow*)

(detect-pose-rarm)

(send *ri* :call-operation-return :collisiondetectorservice_settolerance :link_pair_name "RARM_JOINT5:LARM_JOINT5" :tolerance 0)

;; scrape
;; memo
(setq memo (send *hironxjsk* :rarm :end-coords :copy-worldcoords))
(close-rhand-finish-fold-2nd)
(send *right-target-arrow* :move-to (send (send memo :copy-worldcoords) :translate #f(0 0 100) :world) :world)
(solve-ik-rarm *right-target-arrow*)
