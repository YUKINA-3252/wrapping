<launch>
  <arg name="rosbag" />
  <arg name="camera_ns" default="head_camera"/>
  <arg name="gui" default="true" />
  <arg name="loop" default="true" />
  <arg name="manager" default="rosbag_play_nodelet_manager" />

  <arg name="loop_flag" value="--loop" if="$(arg loop)" />
  <arg name="loop_flag" value="" unless="$(arg loop)" />

  <arg name="depth_registration" value="false" />

  <arg name="RGB_CAMERA_INFO" value="/$(arg camera_ns)/rgb/camera_info" />
  <arg name="RGB_IMAGE" value="/$(arg camera_ns)/rgb/image_raw" />
  <arg name="DEPTH_CAMERA_INFO" value="/$(arg camera_ns)/depth/camera_info" />
  <arg name="DEPTH_IMAGE" value="/$(arg camera_ns)/depth/image_raw" />

  <node pkg="nodelet" type="nodelet" name="$(arg manager)" args="manager" output="screen" />
  <node name="rgb_decompress" pkg="image_transport" type="republish"
        args="compressed in:=$(arg RGB_IMAGE) raw out:=$(arg RGB_IMAGE)" />
  <node name="depth_decompress" pkg="image_transport" type="republish"
        args="compressedDepth in:=$(arg DEPTH_IMAGE) raw out:=$(arg DEPTH_IMAGE)" />
   <node pkg="nodelet" type="nodelet" name="point_cloud_xyzrgb"
        args="load depth_image_proc/point_cloud_xyzrgb $(arg manager)" output="screen" >
    <remap from="rgb/camera_info" to="$(arg RGB_CAMERA_INFO)" />
    <remap from="rgb/image_rect_color" to="$(arg RGB_IMAGE)" />
    <remap from="depth_registered/image_rect" to="$(arg DEPTH_IMAGE)" />
    <remap from="depth_registered/points" to="/$(arg camera_ns)/depth_registered/points" />
    <rosparam>
      queue_size: 100
    </rosparam>
  </node>

  <param name="/use_sim_time" value="true" />
  <param name="robot_description"
         command="$(find xacro)/xacro --inorder $(find hironx_tutorial)/models/HIRONXJSK.gazebo.xacro
                  gazebo:=false" />

  <node pkg="rosbag" type="play" name="rosbag_play"
        args="$(arg rosbag) $(arg loop_flag) --clock" output="screen" />

  <!-- <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"> -->
  <!--   <remap from="joint_states" to="/robot/joint_states"/> -->
  <!-- </node> -->

  <node name="$(anon rviz)" pkg="rviz" type="rviz"
        args="-d $(find wrapping_melodic)/rvizconfig/hiro_rosbag.rviz"
        if="$(arg gui)" />

  <arg name="input_camera_info" value="/head_camera/depth/camera_info" />
  <arg name="input_rgb_image" value="/head_camera/rgb/image_raw" />
  <arg name="input_image" value="/head_camera/depth/image_raw" />
  <arg name="input_cloud" value="/head_camera/depth_registered/points" />
  <arg name="box_len_x" default="0.14" />
  <arg name="box_len_y" default="0.2" />
  <arg name="box_len_z" default="0.12" />
  <arg name="paper_len_x" default="0.175" />
  <arg name="paper_len_y" default="0.6" />
  <arg name="paper_len_z" default="0.001" />

  <!-- publish box array -->
  <node name="default_box_marker_array_publisher" type="rosbag_box_marker.py" pkg="wrapping_melodic" output="screen" >
    <param name="~box_x_coord" value="0.45"/>
    <param name="~box_y_coord" value="-0.034" />
    <param name="~box_z_coord" value="0.04"/>
    <param name="~box_len_x" value="$(arg box_len_x)"/>
    <param name="~box_len_y" value="$(arg box_len_y)"/>
    <param name="~box_len_z" value="$(arg box_len_z)"/>
  </node>
  <!-- publish box array -->
  <node name="default_paper_marker_array_publisher" type="rosbag_paper_marker.py" pkg="wrapping_melodic" output="screen" >
    <param name="~paper_x_coord" value="0.45"/>
    <param name="~paper_y_coord" value="-0.034" />
    <param name="~paper_z_coord" value="-0.08"/>
    <param name="~paper_len_x" value="$(arg paper_len_x)"/>
    <param name="~paper_len_y" value="$(arg paper_len_y)"/>
    <param name="~paper_len_z" value="$(arg paper_len_z)"/>
  </node>


  <!-- attention clipper to /head_camera/depth_registered/points -->
  <include file="$(find wrapping_melodic)/launch/hiro/attention_clipper.launch">
    <arg name="input_cloud" default="$(arg input_cloud)" />
    <arg name="identify_name" default="head_attention_clipper" />
    <arg name="manager"  value="$(arg manager)" />
  </include>
  <!-- attention clipper for tape -->
  <include file="$(find wrapping_melodic)/launch/hiro/attention_clipper.launch">
    <arg name="input_cloud" default="/hsi_color_filter_tape/output" />
    <arg name="identify_name" default="tape_stand" />
    <arg name="manager"  value="$(arg manager)" />
  </include>

  <!-- save pcd -->
  <!-- transform head point cloud -->
  <node name="head_camera_tf_transform_cloud" pkg="nodelet" type="nodelet"
        args="load jsk_pcl_utils/TfTransformCloud $(arg manager)" output="screen" >
    <remap from="~input" to="/bbox_cloud_extract_head_attention_clipper/output"/>
    <rosparam>
      target_frame_id: WAIST
    </rosparam>
  </node>
  <node name="pointcloud_to_pcd_head" type="nodelet" pkg="nodelet"
        args="load jsk_pcl_utils/PointCloudToPCD $(arg manager)" output="screen" >
    <remap from="~input" to="/head_camera_tf_transform_cloud/output" />
    <rosparam subst_value="true">
      prefix: $(find wrapping_melodic)/save_pcd/
      duration: 0.0
      binary: false
      compressed: false
    </rosparam>
  </node>

  <!-- hsi color filter for paper-->
  <node name="hsi_color_filter_paper" type="nodelet" pkg="nodelet"
        args="load jsk_pcl/HSIColorFilter $(arg manager)" output="screen" >
    <remap from="~input" to="/head_camera_tf_transform_cloud/output" />
    <rosparam>
      h_limit_min: 15
      s_limit_min: 25
      i_limit_min: 100
      h_limit_max: 74
      s_limit_max: 100
      i_limit_max: 150
    </rosparam>
  </node>
   <!-- hsi color filter for tape-->
  <node name="hsi_color_filter_tape" type="nodelet" pkg="nodelet"
        args="load jsk_pcl/HSIColorFilter $(arg manager)" output="screen" >
    <remap from="~input" to="/head_camera_tf_transform_cloud/output" />
    <rosparam>
      h_limit_min: -81
      s_limit_min: 43
      i_limit_min: 88
      h_limit_max: -31
      s_limit_max: 67
      i_limit_max: 162
    </rosparam>
  </node>

  <!-- rhand back -->
  <include file="$(find wrapping_melodic)/launch/hiro/extract_save_average_pcl.launch">
    <arg name="average_point_cloud_topic_name" value="/rhand/pos" />
    <arg name="min_max_hsi_topic_name" value="/rhand/hsi" />
    <arg name="extract_point_cloud_topic_name" value="/bbox_cloud_extract_rhand/output" />
    <arg name="input_cloud" value="/hsi_color_filter_paper/output" />
    <arg name="input_image" value="$(arg input_image)" />
    <arg name="identify_name" value="rhand" />
    <arg name="manager"  value="$(arg manager)" />
  </include>

  <!-- box top right point cloud -->
  <include file="$(find wrapping_melodic)/launch/hiro/attention_clipper.launch">
    <arg name="input_cloud" default="/hsi_color_filter_paper/output" />
    <arg name="identify_name" default="box_top_right" />
    <arg name="manager"  value="$(arg manager)" />
  </include>

  <!-- box top point cloud -->
  <include file="$(find wrapping_melodic)/launch/hiro/attention_clipper.launch">
    <arg name="input_cloud" default="/hsi_color_filter_tape/output" />
    <arg name="identify_name" default="box_top" />
    <arg name="manager"  value="$(arg manager)" />
  </include>

  <!-- left hand tape point cloud -->
  <include file="$(find wrapping_melodic)/launch/hiro/attention_clipper.launch">
    <arg name="input_cloud" default="/hsi_color_filter_tape/output" />
    <arg name="identify_name" default="left_hand_tape" />
    <arg name="manager"  value="$(arg manager)" />
  </include>

</launch>
